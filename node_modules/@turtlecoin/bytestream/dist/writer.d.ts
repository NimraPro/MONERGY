/// <reference types="node" />
import { Reader } from './reader';
import * as BigInteger from 'big-integer';
import { Readable } from 'stream';
/**
 * Allows for easy writing of blob encoded data
 * @noInehritDoc
 */
export declare class Writer extends Readable {
    private m_buffer;
    private m_readIndex;
    /**
     * The current data in the writer in a hexadecimal string format
     */
    get blob(): string;
    /**
     * The current data in the writer as a Buffer object
     */
    get buffer(): Buffer;
    /**
     * The length of the current data in bytes
     */
    get length(): number;
    /** @ignore */
    private get readIndex();
    /** @ignore */
    _read(size: number): void;
    /**
     * Clears the current object of all existing data
     */
    clear(): void;
    /**
     * Writes a 32-byte hash value to the data
     * @param hash
     * @param encoding the encoding of the string
     */
    hash(hash: Buffer | string, encoding?: BufferEncoding): boolean;
    /**
     * Writes a hexadecimal string to the data
     * @param hex
     * @param encoding the encoding of the string
     */
    hex(hex: Buffer | string, encoding?: BufferEncoding): boolean;
    /**
     * Writes a signed integer to the data
     * @param value
     * @param [bits] the number of bits to use
     * @param [be] whether the value should be written in big endian
     */
    int_t(value: BigInteger.BigInteger | number, bits?: number, be?: boolean): boolean;
    /**
     * Writes a int8_t to the data
     * @param value
     */
    int8_t(value: BigInteger.BigInteger | number): boolean;
    /**
     * Writes a int16_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    int16_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a int32_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    int32_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a date object into the data stream
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    time_t(value: Date, be?: boolean): void;
    /**
     * Returns the current read buffer as a string
     * @param encoding
     */
    toString(encoding?: BufferEncoding): string;
    /**
     * Writes an unsigned integer to the data
     * @param value
     * @param [bits] the number of bits to use
     * @param [be] whether the value should be written in big endian
     */
    uint_t(value: BigInteger.BigInteger | number, bits?: number, be?: boolean): boolean;
    /**
     * Writes a uint8_t to the data
     * @param value
     */
    uint8_t(value: BigInteger.BigInteger | number): boolean;
    /**
     * Writes a uint16_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    uint16_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a uint32_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    uint32_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a uint64_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    uint64_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a uint128_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    uint128_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a uint256_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    uint256_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a uint512_t to the data
     * @param value
     * @param [be] whether the value should be written in big endian
     */
    uint512_t(value: BigInteger.BigInteger | number, be?: boolean): boolean;
    /**
     * Writes a varint encoded value to the data
     * @param value
     * @param [levin] whether the value should be levin varint encoded
     */
    varint(value: BigInteger.BigInteger | number, levin?: boolean): boolean;
    /**
     * Writes an arbitrary type of input to the data
     * @param payload the payload to write
     * @param encoding the encoding used in the string based data
     */
    write(payload: Buffer | Writer | Reader | string | any, encoding?: BufferEncoding): boolean;
}
